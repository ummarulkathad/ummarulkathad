CREATE TABLE PUBLISHER
(NAME VARCHAR(20),
ADDRESS VARCHAR(20),
PHONE NUMBER(10),
PRIMARY KEY (NAME)
);

INSERT INTO PUBLISHER VALUES('KATHAD','MITE',9535529131);


CREATE TABLE BOOK1
(BOOK_ID VARCHAR(5),
TITLE VARCHAR(10),
PUBLISHER_NAME VARCHAR(20),
PUB_YEAR NUMBER(4),
PRIMARY KEY(BOOK_ID),
FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(NAME)
);


INSERT INTO BOOK1 VALUES('123','URBAN','KATHAD',2001);


CREATE TABLE BOOK_AUTHORS
(BOOK_ID VARCHAR(5),
AUTHOR_NAME VARCHAR(10),
FOREIGN KEY(BOOK_ID) REFERENCES BOOK1(BOOK_ID) on delete cascade
);

INSERT INTO BOOK_AUTHORS VALUES('','VINAY');


CREATE TABLE LIB_PROG
(PRG_ID NUMBER(4),
PRG_NAME VARCHAR(20),
ADDRESS VARCHAR(20),
PRIMARY KEY (PRG_ID)
);
INSER INTO  LIB_PROG VALUES(400,'PYTHON','MANGLORE');


CREATE TABLE BOOK_COPIES
(BOOK_ID VARCHAR(5),
PRG_ID NUMBER(4),
NO_COPIES NUMBER(2),
PRIMARY KEY(BOOK_ID,PRG_ID),
FOREIGN KEY(BOOK_ID) REFERENCES BOOK1(BOOK_ID)on delete cascade,
FOREIGN KEY(PRG_ID) REFERENCES LIB_PROG(PRG_ID)
);
INSER INTO  BOOK_COPIES VALUES(,'',30);

CREATE TABLE CARD
(
CARD_NO NUMBER(5),
PRIMARY KEY(CARD_NO)
);


CREATE TABLE BOOK_LENDING
(BOOK_ID VARCHAR(5),
PRG_ID NUMBER(4),
CARD_NO NUMBER(5),
DATE_OUT DATE,
DUE_DATE DATE,
PRIMARY KEY (BOOK_ID,PRG_ID,CARD_NO),
FOREIGN KEY(BOOK_ID) REFERENCES BOOK1(BOOK_ID)on delete cascade,
FOREIGN KEY(PRG_ID) REFERENCES LIB_PROG(PRG_ID),
FOREIGN KEY(CARD_NO) REFERENCES CARD(CARD_NO)
);


SELECT B.BOOK_ID,B.TITLE,A.AUTHOR_NAME,P.NAME,C.NO_COPIES,L.PRG_ID
 FROM BOOK1 B,BOOK_AUTHORS A,PUBLISHER P,BOOK_COPIES C,LIB_PROG L
 WHERE B.PUBLISHER_NAME=P.NAME AND B.BOOK_ID=C.BOOK_ID AND L.PRG_ID=C.PRG_ID;


select CARD_NO
FROM BOOK_LENDING
WHERE DATE_OUT Between '01-JAN-2017' AND '01-JUL-2017'
group by CARD_NO
having count(*)>3;


delete from book1 where book_id=789;
select * from book1;
select * from book_copies;
select * from book_lending;


create view v_publication as  select * from book1;



create view v_book as
SELECT B.BOOK_ID,B.TITLE,C.NO_COPIES
 FROM BOOK1 B,BOOK_COPIES C,LIB_PROG L
 WHERE B.BOOK_ID=C.BOOK_ID AND L.PRG_ID=C.PRG_ID;




PRG2:



CREATE TABLE SALESMAN
(SALESMAN_ID NUMBER(10),
NAME VARCHAR(10),
CITY VARCHAR(10),
COMMSSION NUMBER(10),
PRIMARY KEY (SALESMAN_ID)
);

INSERT INTO SALESMAN VALUES(1000,'KATHAD','MANGLORE',10000);


CREATE TABLE CUSTMER
(CUSTMER_ID NUMBER(10),
CUSTMER_NAME VARCHAR(10),
CITY VARCHAR(10),
GRADE VARCHAR(4),
SALEMAN_ID NUMBER(10),
PRIMARY KEY (CUSTMER_ID),
FOREIGN KEY(SALEMAN_ID) REFERENCES SALESMAN(SALESMAN_ID)on delete SET NULL);

INSER INTO CUSTMER VALUES(1005,'VIJI','AP','A',1000);

CREATE TABLE ORDERS
(ORDER_NO NUMBER(5),
PURC_ID NUMBER(10),
ORDER_DATE DATE,
CUSTMER_ID NUMBER(10),
SALEMAN_ID NUMBER(10),
PRIMARY KEY(CUSTMER_ID,SALEMAN_ID),
FOREIGN KEY(CUSTMER_ID) REFERENCES CUSTMER(CUSTMER_ID)on delete cascade,
FOREIGN KEY(SALEMAN_ID) REFERENCES SALESMAN(SALESMAN_ID)on delete cascade);


INSERT INTO ORDERS VALUES(123456,22400,'02-JUL-2023',1005,1000);





SELECT GRADE,COUNT(distinct CUSTMER_ID) 
FROM CUSTMER
GROUP BY GRADE
HAVING GRADE>(SELECT AVG(GRADE) FROM CUSTMER
WHERE CITY='BANGLORE');


SELECT SALESMAN_ID,NAME 
FROM SALESMAN S
WHERE 1<(SELECT COUNT(*)
FROM CUSTMER
WHERE  SALEMAN_ID=S.SALESMAN_ID);


SELECT SALESMAN_ID,CUSTMER_ID
FROM SALESMAN S,CUSTMER C
WHERE S.SALESMAN_ID=C.SALEMAN_ID AND 

SELECT salesman.salesman_id, name, custmer_name, commssion FROM salesman, custmer WHERE salesman.city = custmer.city UNION (SELECT salesman_id, name, 'NO MATCH', commssion FROM salesman WHERE NOT city = ANY (SELECT city FROM custmer)) ORDER BY 2 DESC;


CREATE VIEW e_salesman
AS SELECT b.ORDER_DATE, a.salesman_id, a.name
FROM salesman a, orders b
WHERE a.salesman_id = b.saleman_id
AND b.PURC_ID =(SELECT MAX (PURC_ID)
  FROM orders c
       WHERE c.ORDER_DATE = b.ORDER_DATE);


delete from salesman where salesman_id=1000;




PRG:3

CREATE TABLE ACTOR
(ACT_ID NUMBER(3),
ACTOR_NAME VARCHAR(20),
ACT_GENDER VARCHAR(1),
PRIMARY KEY (ACT_ID)
);

CREATE TABLE DIRECTOR (DIR_ID NUMBER(3), DIR_NAME VARCHAR(20), DIR_PHONE NUMBER(10), PRIMARY KEY (DIR_ID) );


CREATE TABLE MOVIES (MOV_ID NUMBER(4),MOV_TITLE VARCHAR(25),MOV_YEAR NUMBER(4),MOV_LANG VARCHAR(12),DIR_ID NUMBER(3), PRIMARY KEY (MOV_ID),
FOREIGN KEY(DIR_ID) REFERENCES DIRECTOR(DIR_ID));


CREATE TABLE MOVIE_CAST 
(ACT_ID NUMBER(3),
MOV_ID NUMBER(4),
ROLE VARCHAR(10),
PRIMARY KEY (ACT_ID,MOV_ID),
FOREIGN KEY(ACT_ID) REFERENCES ACTOR(ACT_ID),
FOREIGN KEY(MOV_ID) REFERENCES MOVIES(MOV_ID));

CREATE TABLE RATING
(
MOV_ID NUMBER(4),
REG_STARS VARCHAR(25),
PRIMARY KEY (MOV_ID),
FOREIGN KEY(MOV_ID) REFERENCES MOVIES(MOV_ID));



INSERT INTO ACTOR VALUES(301,'ANUSKA','F');
INSERT INTO ACTOR VALUES(302,'PRABHS','M');
INSERT INTO ACTOR VALUES(303,'PUNEETH','M');
INSERT INTO ACTOR VALUES(304,'JERMY',M);


INSERT INTO DIRECTOR VALUES(60,'RAJA',953551525);
INSERT INTO DIRECTOR VALUES(61,'HITCHCOCK',953544525);
INSERT INTO DIRECTOR VALUES(62,'FARAN',253551525);
INSERT INTO DIRECTOR VALUES(63,'STEVINSPLES',9554151525);


INSERT INTO MOVIES VALUES (1001,’BAHUBALI-2’, 2017, ‘TELAGU’, 60);
INSERT INTO MOVIES VALUES (1002,’BAHUBALI-1’, 2015, ‘TELAGU’, 60);
INSERT INTO MOVIES VALUES (1003,’AKASH’, 2008, ‘KANNADA’, 61);
INSERT INTO MOVIES VALUES (1004,’WAR HORSE’, 2011, ‘ENGLISH’, 63);


INSERT INTO MOVIE_CAST VALUES (301, 1002, ‘HEROINE’);
INSERT INTO MOVIE_CAST VALUES (301, 1001, ‘HEROINE’);
INSERT INTO MOVIE_CAST VALUES (303, 1003, ‘HERO’);
INSERT INTO MOVIE_CAST VALUES (303, 1002, ‘GUEST’);
INSERT INTO MOVIE_CAST VALUES (304, 1004, ‘HERO’);

INSERT INTO RATING VALUES (1001, 4);
INSERT INTO RATING VALUES (1002, 2);
INSERT INTO RATING VALUES (1003, 5);
INSERT INTO RATING VALUES (1004, 4);


SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME = ‘HITCHCOCK’)



SELECT MOV_TITLE
FROM MOVIES M, MOVIE_CAST MV
WHERE M.MOV_ID=MV.MOV_ID AND ACT_ID IN (SELECT ACT_ID
FROM MOVIE_CAST GROUP BY ACT_ID
HAVING COUNT (ACT_ID)>1)
GROUP BY MOV_TITLE
HAVING COUNT (*)>1;


SELECT ACT_NAME, MOV_TITLE, MOV_YEAR
FROM ACTOR A
JOIN MOVIE_CAST C
ON A.ACT_ID=C.ACT_ID
JOIN MOVIES M
ON C.MOV_ID=M.MOV_ID
WHERE M.MOV_YEAR NOT BETWEEN 2000 AND 2015; 

SELECT MOV_TITLE, MAX (REV_STARS)
FROM MOVIES
INNER JOIN RATING USING (MOV_ID)
GROUP BY MOV_TITLE
HAVING MAX (REV_STARS)>0
ORDER BY MOV_TITLE;


UPDATE RATING
SET REV_STARS=5
WHERE MOV_ID IN (SELECT MOV_ID FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME = ‘STEVEN
SPIELBERG’));


